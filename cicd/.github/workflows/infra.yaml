name: terraform-deployment
run-name: Terraform deployment cloud resources

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master"]
  pull_request:
    branches: [ "main", "master"]

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  CLOUDFLARE_DNS_TOKEN: ${{ secrets.CLOUDFLARE_DNS_TOKEN }}
  CLOUDFLARE_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT }}
  ACTION: destroy

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      kube_config: ${{ steps.aks_cluster_name.outputs.CONFIG }}
      env: ${{ steps.environment.outputs.ENV }}
      dnstoken: ${{ steps.dnstoken.outputs.DNSTOKEN }}
      action: ${{ env.ACTION }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: "1.9.5"

    - name: Terraform version
      run: terraform -version
      working-directory: ./infra/terraform

    - name: Terraform Init
      run: terraform init -upgrade
      working-directory: ./infra/terraform

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./infra/terraform

    - name: Terraform Create a plan
      run: terraform plan -out "tfplan"
      working-directory: ./infra/terraform

    - name: Terraform show a plan
      run: terraform show "tfplan"
      working-directory: ./infra/terraform


    - name: Terraform ${{ env.ACTION }} a plan
      run: terraform ${{ env.ACTION }} -parallelism=20 --auto-approve
      working-directory: ./infra/terraform

    - name: Terraform output
      id: terraform-output
      run: |
        terraform output
      working-directory: ./infra/terraform

    - name: Terraform output kube_config_raw
      if: env.ACTION == 'apply'
      run: |
        terraform output -raw  kube_config_raw
      working-directory: ./infra/terraform

    - name: Terraform output kube_config
      id: aks_cluster_name
      if: env.ACTION == 'apply'
      run: |
        OUTPUT=$(terraform output -raw kube_config_raw|base64 -w 0)
        echo "::set-output name=CONFIG::$OUTPUT"
      working-directory: ./infra/terraform

    - name: Terraform output environment
      id: environment
      if: env.ACTION == 'apply'
      run: |
        OUTPUT=$(terraform output environment)
        echo "::set-output name=ENV::$OUTPUT"
      working-directory: ./infra/terraform

    - name: Terraform output environment
      id: dnstoken
      run: |
        OUTPUT=${{ secrets.CLOUDFLARE_DNS_TOKEN }}
        echo "::set-output name=DNSTOKEN::$OUTPUT"
      working-directory: ./infra/terraform

  call_install_argocd:
    name: Install ArgocdCD
    uses: ./.github/workflows/argocd.yaml 
    needs: terraform
    permissions:
      contents: read
    if: needs.terraform.result == 'success' &&  needs.terraform.outputs.action == 'apply'
    secrets:
        DNS_TOKEN: ${{ secrets.CLOUDFLARE_DNS_TOKEN }}
    with:
      kube-config: ${{ needs.terraform.outputs.kube_config }}
      environment: ${{ needs.terraform.outputs.env }}
      cloudflare_dns_token: ${{ needs.terraform.outputs.dnstoken }}
      action: ${{ needs.terraform.outputs.action }}
      first_deployment: true

