apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-platform-orchestration
  title: Create Platform Orchestration
  description: This template will create the platform orchestration structure
spec:
  owner: syner
  type: service

  parameters:
    - title: User info
      properties:
        userName:
          ttile: User name 
          type: string
          description: User logged
          ui:field: UserFieldName
        userEmail:
          ttile: Email of user
          type: string
          description: Email of user logged
          ui:field: UserFieldEmail
    - title: Project info
      required:
        - projectName
        - repoUrl
      properties:
        projectName:
          ttile: Project name
          type: string
          description: Project name to be create
          default: platform6
        projectLabels:
          ttile: Project labels
          type: string
          description: Set labels for this project
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - synera-br
  steps:
    - id: fetch-catalog
      name: Fetch Catalog
      action: fetch:template
      input:
        url: ../catalog/component
        # targetPath: ./catalog
        values:
          projectName: ${{ parameters.projectName }}
          userName: ${{ parameters.userName }}
          description: description

    - name: Write Catalog information
      action: catalog:write
      input:
        entity:
          apiVersion: 'backstage.io/v1alpha1'
          kind: Component
          metadata:
            name: ${{ parameters.projectName }}
            annotations:
              github.com/project-slug: ${{ parameters.repoUrl | projectSlug }}
          spec:
            type: service
            lifecycle: production
            owner: ${{ parameters.userName }}
        filePath: 'catalog-info.yaml'

    - id: fetch-cicd
      name: Fetch CI/CD
      action: fetch:template
      input:
        url: ../cicd
        targetPath: ./
        values:
          projectName: ${{ parameters.projectName }}
          userName: ${{ parameters.userName }}
          description: description

    - id: fetch-infra
      name: Fetch infra as code
      action: fetch:template
      input:
        url: ../infra
        targetPath: ./
        values:
          projectName: ${{ parameters.projectName }}
          userName: ${{ parameters.userName }}
          description: description
          
    - id: get-secrets
      name: getting secrets
      action: azure:keyvault
      input:
        secretName: ${{ parameters.secretName }}
        vaultName: ${{ parameters.vaultName }}
        subscription: ${{ parameters.subscription }}

    - id: debug-secrets
      name: working in repository
      action: debug:log      
      each: ${{ steps['get-secrets'].output  }}
      input:
        message: |
          ${{ each.key }}
          ${{ each.value }}          
        
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        secrets:
          ARM_CLIENT_ID: ${{ steps['get-secrets'].output['ARM_CLIENT_ID'] }}
          ARM_SUBSCRIPTION_ID: ${{ steps['get-secrets'].output['ARM_SUBSCRIPTION_ID'] }}
          ARM_CLIENT_SECRET: ${{ steps['get-secrets'].output['ARM_CLIENT_SECRET'] }}
          ARM_TENANT_ID: ${{ steps['get-secrets'].output['ARM_TENANT_ID'] }}
          DOCKER_HUB_LOGIN: ${{ steps['get-secrets'].output['DOCKER_HUB_LOGIN'] }}
          GIT_CLIENT_ID: ${{ steps['get-secrets'].output['GITHUB_CLIENT_ID'] }}
          GIT_CLIENT_SECRET: ${{ steps['get-secrets'].output['GITHUB_CLIENT_SECRET'] }}
          GIT_TOKEN: ${{ steps['get-secrets'].output['GITHUB_TOKEN'] }}
          
    - id: wait
      name: working in repository
      action: debug:wait
      input:
        seconds: 15

    - id: dispatch
      name: dispatch
      action: github:actions:dispatch
      input:
        workflowId: infra.yaml
        branchOrTagName: master
        description: This is 
        repoUrl: ${{ parameters.repoUrl }}

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      # - title: Open in catalog
      #   icon: catalog
      #   entityRef: ${{ steps['register'].output.entityRef }}